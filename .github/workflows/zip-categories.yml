name: Auto Zip PDFs for GitHub Pages

on:
  push:
    paths:
      - 'acm/**'
      - 'fbos/**'
      - 'rac/**'
      - 'frc/**'
      - 'herc/**'
      - 'zips/**'

jobs:
  zip:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y zip unzip p7zip-full

      - name: Create robust zips
        run: |
          set -euo pipefail
          mkdir -p zips .checksums
          changed=false

          # Initialize directories to process
          expected_dirs=("acm" "fbos" "rac" "frc" "herc")

          # Function to create GitHub Pages compatible zip
          create_robust_zip() {
            local src_dir=$1
            local zip_file=$2
            
            # Method 1: Standard zip with compression
            echo "Creating standard ZIP file..."
            (cd "$src_dir" && zip -9 -r "../$zip_file" . -i '*.pdf' -x '*.zip')
            
            # Verify the zip
            if ! unzip -tq "$zip_file"; then
              echo "Standard ZIP failed validation, trying 7zip method..."
              rm -f "$zip_file"
              
              # Method 2: 7zip as fallback
              7z a -tzip "$zip_file" "$src_dir/*.pdf"
              
              if ! unzip -tq "$zip_file"; then
                echo "7zip method also failed validation"
                return 1
              fi
            fi
            return 0
          }

          # Process each directory
          for dir in "${expected_dirs[@]}"; do
            echo "Processing $dir..."
            hash_file=".checksums/$dir.sha"
            zip_file="zips/$dir.zip"
            needs_zip=false

            # Check existing zip validity
            if [ -f "$zip_file" ]; then
              if ! unzip -tq "$zip_file"; then
                echo "Existing ZIP is corrupt, will regenerate"
                needs_zip=true
                rm -f "$zip_file"
              fi
            else
              needs_zip=true
            fi

            # Skip if directory doesn't exist
            if [ ! -d "$dir" ]; then
              echo "Directory $dir does not exist"
              [ -f "$zip_file" ] && rm -f "$zip_file" && changed=true
              [ -f "$hash_file" ] && rm -f "$hash_file" && changed=true
              continue
            fi

            # Compute current hash of PDFs
            current_hash=$(find "$dir" -type f -name "*.pdf" -print0 2>/dev/null | \
              xargs -0 stat --format '%n %s' 2>/dev/null | sha256sum | cut -d' ' -f1 || true)

            # Get previous hash
            previous_hash=""
            [ -f "$hash_file" ] && previous_hash=$(cat "$hash_file")

            # Determine if update needed
            if [ "$needs_zip" = true ] || [ "$current_hash" != "$previous_hash" ]; then
              echo "Update needed for $dir"
              pdf_count=$(find "$dir" -type f -name "*.pdf" | wc -l)
              
              if [ "$pdf_count" -gt 0 ]; then
                echo "Zipping $pdf_count PDF(s) from $dir"
                if create_robust_zip "$dir" "$zip_file"; then
                  ls -lh "$zip_file"
                  echo "$current_hash" > "$hash_file"
                  changed=true
                else
                  echo "Failed to create valid ZIP for $dir"
                  exit 1
                fi
              else
                echo "No PDFs found, removing zip if exists"
                rm -f "$zip_file"
                changed=true
              fi
            else
              echo "No changes needed for $dir"
            fi
          done

          # Git operations
          if [ "$changed" = true ]; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git config core.autocrlf false
            git config core.safecrlf true

            # Handle line endings explicitly
            find zips -type f -name "*.zip" -exec dos2unix {} \;

            git fetch origin main
            git merge --no-edit origin/main || {
              echo "Merge conflict detected, aborting..."
              git merge --abort
              exit 1
            }

            git add .checksums zips
            if ! git diff --cached --quiet; then
              git commit -m "Auto-update: Validated ZIP files $(date +'%Y-%m-%d')"
              git remote set-url origin https://x-access-token:${{ secrets.PAT }}@github.com/${{ github.repository }}
              
              # Push with retry
              for i in {1..3}; do
                if git push origin main; then
                  break
                else
                  echo "Push failed, retrying ($i/3)..."
                  sleep 2
                  git fetch origin main
                  git merge --no-edit origin/main || {
                    echo "Merge conflict during retry, aborting..."
                    git merge --abort
                    exit 1
                  }
                fi
              done
            fi
          fi